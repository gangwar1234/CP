[{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/google-pub","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"Google MQTT Publish","category":"Cloud","tag":"cloud","date":"2018-2-21","description":"An application based on Google* Cloud IoT Core for publishing a single message. See the README.md file in the GitHub repo for this project before continuing.","platform":{"libs":["Jannson","libjwt","OpenSSL","paho.mqtt.c"],"os":["ubuntu-desktop-xenial-64bit"]},"service_provider":"Google Cloud IoT Core","service_provider_uri":"https://cloud.google.com/iot-core","service_provider_description":"A fully managed service to easily and securely connect, manage, and ingest data from globally dispersed devices","sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/google-pub/c/README.md","additional_fields":[{"id":"deviceId_iss","name":"Device ID","description":"Registered device ID"},{"id":"region_iss","name":"Region","description":"The server region"},{"id":"registryId_iss","name":"Registry ID","description":"The registry ID"},{"id":"projectId_iss","name":"Project ID","description":"The project ID"},{"id":"ecpath_iss","name":"Private EC Key File Path","description":"Full Path to Private EC Key File, e.g. /etc/google-cloud-keys/ec_private.pem"},{"id":"rootpath_iss","name":"roots.pem file path","description":"Full Path to roots.pem File, e.g. /etc/google-cloud-keys/roots.pem"}],"categories":["Code Samples/Cloud Service Connectors"],"dependencies":["iot-plugin"],"ldflags":"-lssl -lcrypto -lpaho-mqtt3cs -ljwt","main":"mqtt_ciotc.c","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/hello-world","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"Hello World","category":"Get Started","description":"A simple Hello World example","author":"Intel Corporation","date":"2016-01-01","sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/hello-world/readme.md","categories":["Code Samples/Get Started"],"dependencies":[],"main":"main.c","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/onboard-blink","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"On-Board LED Blink","category":"Get Started","description":"Demonstrate how to blink the on board LED, writing a digital value to an output pin using the MRAA library","author":"Intel Corporation","date":"2016-06-13","platform":{"hwreq":["gpio"],"libs":["mraa"]},"sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/onboard-blink/README.md","categories":["Code Samples/Get Started"],"dependencies":["mraa","iot-plugin"],"main":"blink.c","ldflags":"-lmraa","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/up2-leds","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"UP Squared Built-in LEDs","category":"Get Started","description":"This sample shows how to use the new LED class and APIs added to the MRAA library. It is intended to run on the UP Squared board, and will utilize the 4 built-in color LEDs located under the Ethernet ports. No additional hardware is required.","author":"Intel Corporation","date":"2018-03-15","platform":{"hwreq":["UP Squared Board"],"libs":["mraa"]},"sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/up2-leds/README.md","categories":["Code Samples/Get Started"],"dependencies":["mraa","iot-plugin"],"main":"up2-leds.c","ldflags":"-lmraa","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/compiler/interprocedural_optimization_samples","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Interprocedural Optimization","category":"Intel® Compiler","categories":["Code Samples/Software Optimization","Tool Samples/Intel C++ Compiler"],"description":"The example demonstrates using the Multi-file Interprocedural Optimization (IPO) feature of the Intel® C++ Compiler.","author":"Intel Corporation","date":"2018-02-23","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/compiler/interprocedural_optimization_samples/c/readme.html","dependencies":["icc"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/include"},"makeVariables":{"CC":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/compiler/intrinsic_samples","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Intrinsics","category":"Intel® Compiler","categories":["Code Samples/Software Optimization","Tool Samples/Intel C++ Compiler"],"description":"The intrinsic samples are designed to show how to utilize the intrinsics supported by the  Intel® C++ compiler in a variety of applications. The intrinsic samples require processors that support Intel® MMX™ and Intel® Streaming SIMD Extensions 2 (Intel® SSE2) or higher. If not supported, the application will fail.","author":"Intel Corporation","date":"2018-02-23","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/compiler/intrinsic_samples/c/readme.html","dependencies":["icc"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/include"},"makeVariables":{"CC":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/compiler/optimize_samples","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Optimizations","category":"Intel® Compiler","categories":["Code Samples/Software Optimization","Tool Samples/Intel C++ Compiler"],"description":"This sample is designed to illustrate specific compiler optimizations such as O1, O2 and O3.","author":"Intel Corporation","date":"2018-02-23","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/compiler/optimize_samples/c/readme.html","dependencies":["icc"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/include"},"makeVariables":{"CXX":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/compiler/profileguided_optimization_samples","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Profile-Guided Optimization","category":"Intel® Compiler","categories":["Code Samples/Software Optimization","Tool Samples/Intel C++ Compiler"],"description":"Fluid animate is one of a class of algorithms for calculating fluid flow. This sample is an implementation using Intel® Cilk™ Plus technology to demonstrate the use of Intel Profile Guided Optimization (PGO).","author":"Intel Corporation","date":"2018-02-23","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/compiler/profileguided_optimization_samples/c/readme.html","dependencies":["icc"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/include"},"makeVariables":{"CXX":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icpc"},"indexerVariables":{"COMMAND":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icpc","FLAGS":"-std=c++11"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/compiler/vec_samples","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Auto-Vectorization","category":"Intel® Compiler","categories":["Code Samples/Software Optimization","Tool Samples/Intel C++ Compiler"],"description":"This tutorial demonstrates how you can improve the performance of the matrix multiplication sample by using the Auto-Vectorization features of the Intel® compiler.","author":"Intel Corporation","date":"2018-02-23","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/compiler/vec_samples/c/readme.html","dependencies":["icc"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/include"},"makeVariables":{"CXX":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc",".DEFAULT_GOAL":"baseline"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/gdb/ReverseDebugging","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Reverse Debugging","category":"Intel® GDB","categories":["Code Samples/Performance, Power, & Thermal Analysis","Tool Samples/Intel® GDB"],"description":"This is an example that illustrates how to use a processors execution trace feature together with Intel-enhanced GDB integrated into Eclipse IDE. It will demonstrate how to find bugs, like stack corruptions, that are otherwise hard to root cause using reverse debugging and the Function Call History view. This sample will work from the Eclipse IDE.","author":"Intel Corporation","date":"2018-02-23","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/gdb/ReverseDebugging/c/readme.html","dependencies":["ia-gdb"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/include","PATH":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64:${PATH}"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/mkl/matrix_multiplication","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Matrix Multiplication","category":"Intel® Math Kernel Library","categories":["Code Samples/Software Optimization","Tool Samples/Intel® Math Kernel Library"],"description":"The Using Intel® Math Kernel Library for Matrix Multiplication (C Language) tutorial demonstrates using Intel® Math Kernel Library (Intel® MKL) in your applications to multiply matrices, measuring performance of matrix multiplication, and controlling threading.","author":"Intel Corporation","date":"2018-03-06","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/mkl/matrix_multiplication/c/readme.html","dependencies":["mkl","icc"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/mkl/include","LD_LIBRARY_PATH":"${ISS_ROOT}/compilers_and_libraries/linux/lib/intel64"},"makeVariables":{"CC":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/vtune_amplifier/matrix_sample","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Matrix","category":"Intel® VTune™ Amplifier","categories":["Code Samples/Performance, Power, & Thermal Analysis","Tool Samples/Intel® VTune™ Amplifier"],"description":"The matrix sample allows you to explore the various capabilities of the Intel® VTune™ Amplifier for analyzing threaded applications.","author":"Intel Corporation","date":"2018-03-08","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/vtune_amplifier/matrix_sample/c/readme.html","dependencies":["icc","mkl","vtune"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"makeVariables":{"ICC":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc"}}}]