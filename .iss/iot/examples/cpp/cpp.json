[{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/analog-in","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"Analog Input","category":"Grove Starter Kit","description":"Demonstrate how to read an analog voltage value from an input pin using the MRAA library, any sensor that outputs a variable voltage can be used with this example code Suitable ones in the Grove Starter Kit are the Rotary Angle Sensor, Light Sensor, Sound Sensor, Temperature Sensor.","author":"Intel Corporation","date":"2015-06-13","platform":{"hwreq":["Analog sensor connected to an analog pin."],"libs":["mraa"]},"sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/analog-in/README.md","categories":["Code Samples/Sensors"],"dependencies":["mraa","iot-plugin"],"main":"analog-in.cpp","ldflags":"-lmraa","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/aws-pub-sub","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"AWS-IoT-PubSub","category":"Cloud","tag":"cloud","date":"2017-07-27","description":"An application based on Amazon* AWS IoT C++ SDK 'PubSub' sample app. See the README.md file in the GitHub repo for this project before continuing.","platform":{"libs":["AWS IoT C++ SDK"]},"service_provider":"Amazon Web Services (AWS)","service_provider_uri":"https://aws.amazon.com","service_provider_description":"Amazon's On-demand cloud computing platform that offers a paid subscription with a 12-month free-tier option.","sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/aws-pub-sub/cpp/README.md","additional_fields":[{"id":"endpoint_iss","name":"AWS IoT endpoint","description":"AWS IoT endpoint for your project"},{"id":"root_ca_path_iss","name":"Root CA File Path","description":"Full Path to Your Root CA file, e.g. /etc/aws-certs/rootCA.crt"},{"id":"client_cert_path_iss","name":"Client Certificate File Path","description":"Full Path to Client Certificate File, e.g. /etc/aws-certs/cert.pem"},{"id":"client_key_path_iss","name":"Client Private Key File Path","description":"Full Path to your Private Key File, e.g. /etc/aws-certs/privkey.pem"}],"categories":["Code Samples/Cloud Service Connectors"],"dependencies":["iot-plugin"],"main":"PubSub.cpp","cflags":"-std=c++11 -I/workspace/${ProjName}/src/include -I/usr/include/awsiotsdk","ldflags":"-laws-iot-sdk-cpp -lssl -lcrypto -lpthread","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/azure-amqp","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"Azure IoT Hub with AMQP","category":"Cloud","tag":"cloud","description":"This project shows you how to send data to Microsoft Azure IoT Hub using AMQP protocol.\nIt will read the temperature from the Grove Temperature Sensor, then sends it to the Azure IoT Hub.\n","date":"2016-11-04","platform":{"hwreq":["Grove Temperature Sensor (GroveTemp) connected to a Grove Base Shield Analog In Port"],"libs":["mraa","upm","Azure IoT SDK"],"os":["ubuntu-desktop-xenial-64bit"]},"service_provider":"Microsoft Azure","service_provider_uri":"https://azure.microsoft.com","service_provider_description":"Microsoft's On-demand cloud computing platform for building, testing, deploying, and managing applications and services through a global network of Microsoft-managed data centers.","sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/azure-amqp/README.md","additional_fields":[{"id":"connectionString","name":"Connection String","description":"The device connection string as defined inside your Azure* IoT Hub"}],"categories":["Code Samples/Cloud Service Connectors"],"dependencies":["mraa","iot-plugin"],"ldflags":"-liothub_client -liothub_client_amqp_transport -laziotsharedutil -luamqp -lpthread -lcurl -lssl -lcrypto -luuid -lmraa -lupm-grove -lparson -lprov_auth_client -lhsm_security_client -luhttp","cxxflags":"-std=c++11 -I/usr/include/azureiot -I/usr/include/azureiot/inc","main":"main.cpp","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/azure-http","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"Azure IoT Hub with HTTP","category":"Cloud","tag":"cloud","description":"This project shows you how to send data to Microsoft Azure IoT Hub using HTTP protocol.\nIt will read the temperature from the Grove Temperature Sensor, then sends it to the Azure IoT Hub.\n","date":"2016-11-04","platform":{"hwreq":["Grove Temperature Sensor (GroveTemp) connected to a Grove Base Shield Analog In Port"],"libs":["mraa","upm","Azure IoT SDK"],"os":["ubuntu-desktop-xenial-64bit"]},"service_provider":"Microsoft Azure","service_provider_uri":"https://azure.microsoft.com","service_provider_description":"Microsoft's On-demand cloud computing platform for building, testing, deploying, and managing applications and services through a global network of Microsoft-managed data centers.","sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/azure-http/README.md","additional_fields":[{"id":"connectionString","name":"Connection String","description":"The device connection string as defined inside your Azure* IoT Hub"}],"categories":["Code Samples/Cloud Service Connectors"],"dependencies":["mraa","iot-plugin"],"ldflags":"-liothub_client -liothub_client_http_transport -laziotsharedutil -lpthread -lcurl -lssl -lcrypto -lmraa -lupm-grove -lparson -lprov_auth_client -lhsm_security_client -luhttp -luuid","cxxflags":"-std=c++11  -I/usr/include/azureiot -I/usr/include/azureiot/inc","main":"main.cpp","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/azure-mqtt","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"Azure IoT Hub with MQTT","category":"Cloud","tag":"cloud","description":"This project shows you how to send data to Microsoft Azure IoT Hub using MQTT protocol.\nIt will read the temperature from the Grove Temperature Sensor, then sends it to the Azure IoT Hub.\n","date":"2016-11-04","platform":{"hwreq":["Grove Temperature Sensor (GroveTemp) connected to a Grove Base Shield Analog In Port"],"libs":["mraa","upm","Azure IoT SDK"],"os":["ubuntu-desktop-xenial-64bit"]},"service_provider":"Microsoft Azure","service_provider_uri":"https://azure.microsoft.com","service_provider_description":"Microsoft's On-demand cloud computing platform for building, testing, deploying, and managing applications and services through a global network of Microsoft-managed data centers.","sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/azure-mqtt/README.md","additional_fields":[{"id":"connectionString","name":"Connection String","description":"The device connection string as defined inside your Azure* IoT Hub"}],"categories":["Code Samples/Cloud Service Connectors"],"dependencies":["mraa","iot-plugin"],"ldflags":"-liothub_client -liothub_client_mqtt_transport -liothub_client_http_transport -lumqtt -laziotsharedutil -lpthread -lcurl -lssl -lcrypto -lmraa -lupm-grove -lparson -lprov_auth_client -lhsm_security_client -luhttp -luuid","cxxflags":"-std=c++11 -I/usr/include/azureiot -I/usr/include/azureiot/inc","main":"main.cpp","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/bluemix-flame-detect","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"IBM* Bluemix flame detection","category":"Cloud","tag":"cloud","description":"Demonstration of an IBM* Bluemix device client and application client communicating with each other","date":"2016-11-04","platform":{"hwreq":["Grove Buzzer (GroveLed)","Flame Sensor (YG1006)"],"libs":["mraa","upm","paho"]},"service_provider":"IBM Cloud (Bluemix)","service_provider_uri":"https://www.ibm.com/cloud","service_provider_description":"IBM Bluemix is a cloud platform as as service. It supports several programming languages and services as well as integated DevOps to build, run deploy, and manage applications on the cloud.","sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/bluemix-flame-detect/README.md","additional_fields":[{"id":"device_id","name":"Device id","description":"Registered device id"},{"id":"device_type","name":"Device Type","description":"The device type id"},{"id":"organization_id","name":"Org id","description":"The organization id"},{"id":"username","name":"Username","description":"The username"},{"id":"password","name":"Password","description":"Password created during the device registration"}],"categories":["Code Samples/Cloud Service Connectors"],"dependencies":["mraa","iot-plugin"],"cflags":"-std=c++11","ldflags":" -lmraa -lupm-buzzer -lupm-yg1006 -lpaho-mqtt3c","main":"BluemixFlameDetection.cpp","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/bluemix-quickstart","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"IBM* Bluemix Quickstart","category":"Cloud","tag":"cloud","description":"This project template allows you to quickly test the IBM* Bluemix.\nIt will read the temperature from the Grove Temperature Sensor then send it to the IBM* Bluemix.\n\nFirst steps:\nGo to https://quickstart.internetofthings.ibmcloud.com/#/ and enter a unique device ID (e.g. the MAC address of your device). \nReplace the placeholder {DEVICE_ID} by this value.\nRun the example and check the results at:\nhttps://quickstart.internetofthings.ibmcloud.com/#/device/{DEVICE_ID}/sensor/\n\n* Other names and brands may be claimed as the property of others.","date":"2016-11-04","platform":{"hwreq":["Grove LED (GroveLed)","Grove Temperature Sensor (GroveTemp)"],"libs":["mraa","upm","paho"]},"service_provider":"IBM Cloud (Bluemix)","service_provider_uri":"https://www.ibm.com/cloud","service_provider_description":"IBM Bluemix is a cloud platform as as service. It supports several programming languages and services as well as integated DevOps to build, run deploy, and manage applications on the cloud.","sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/bluemix-quickstart/README.md","additional_fields":[{"id":"DEVICE_ID","name":"Device id","description":"Choose a unique device id"}],"categories":["Code Samples/Cloud Service Connectors"],"dependencies":["mraa","iot-plugin"],"ldflags":" -lmraa -lupm-grove -lpaho-mqtt3c","main":"main.cpp","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/digital-in","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"Digital Input","category":"Grove Starter Kit","description":"Demonstrate how to read a digital value from an input pin using the MRAA library. Suitable ones in the Grove Starter Kit are the Button and Touch Sensor, connected to digital pin 4 (Grove Base Shield Port D4).","author":"Intel Corporation","date":"2016-09-29","platform":{"hwreq":["GPIO digital input pin"],"libs":["mraa"]},"sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/digital-in/README.md","categories":["Code Samples/Sensors"],"dependencies":["mraa","iot-plugin"],"main":"digital-in.cpp","ldflags":"-lmraa","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/digital-out","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"Digital Output","category":"Grove Starter Kit","description":"Demonstrate how to write a digital value to an output pin using the MRAA library. A suitable part to use this example with in the Grove Starter Kit is the LED. Output connected to digital pin 4 (Grove Base Shield Port D4)","author":"Intel Corporation","date":"2016-09-29","platform":{"hwreq":["GPIO digital output pin"],"libs":["mraa"]},"sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/digital-out/README.md","categories":["Code Samples/Sensors"],"dependencies":["mraa","iot-plugin"],"main":"digital-out.cpp","ldflags":"-lmraa","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/hello-cmake","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"hello_cmake","category":"Get Started","categories":["Code Samples/Get Started"],"cmakeDefines":[{"name":"mydefinename","type":"BOOL","value":"mydefinevalue"}],"cmakeUnDefines":["myundefinename"],"description":"A simple hello world for cmake","author":"Intel Corporation","date":"2018-12-04","sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/hello-cmake/cpp/README","main":"main.cpp","projectOptions":[{"projectType":"cmake","dockerSupported":"true"}],"launchConfig":{"variables":{"TestVariable1":"Arg1","TestVariable2":"Arg2"},"arguments":"${TestVariable1} ${TestVariable2}","remoteCommand":"echo Hi!"}}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/hello-world","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"Hello World","category":"Get Started","description":"A simple Hello World example","author":"Intel Corporation","date":"2016-01-01","sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/hello-world/readme.md","categories":["Code Samples/Get Started"],"dependencies":[],"main":"main.cpp","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/interrupt","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"Interrupt service routine (ISR)","category":"Grove Starter Kit","description":"Demonstrate how to react on an external event with an ISR (Interrupt Service Routine), which will run independently of the main program flow using the MRAA library.","author":"Intel Corporation","date":"2016-09-29","platform":{"hwreq":["Input connected to digital pin 13"],"libs":["mraa"]},"sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/interrupt/README.md","categories":["Code Samples/Sensors"],"dependencies":["mraa","iot-plugin"],"main":"interrupt.cpp","ldflags":"-lmraa","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/onboard-blink","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"On-Board LED Blink","category":"Get Started","description":"Demonstrate how to blink the on board LED, writing a digital value to an output pin using the MRAA library","author":"Intel Corporation","date":"2016-06-13","platform":{"hwreq":["gpio"],"libs":["mraa"]},"sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/onboard-blink/README.md","categories":["Code Samples/Get Started"],"dependencies":["mraa","iot-plugin"],"main":"blink.cpp","ldflags":"-lmraa","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/pwm","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"Pulse Width Modulation (PWM)","category":"Grove Starter Kit","description":"Demonstrate how to use PWM with an output pin using the MRAA library. If the output is connected to a led, its intensity, as perceived by the human eye, will vary depending on the duty cycle.","author":"Intel Corporation","date":"2016-07-06","platform":{"hwreq":["Output connected to digital pin 5 (Grove Base Shield Port D5)"],"libs":["mraa"]},"sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/pwm/README.md","categories":["Code Samples/Sensors"],"dependencies":["mraa","iot-plugin"],"main":"pwm.cpp","ldflags":"-lmraa","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"iot-devkit-samples-625c05c58017930e752e738afaa1fcda1b2232e6/up2-leds","sha":"625c05c58017930e752e738afaa1fcda1b2232e6","example":{"name":"UP Squared Built-in LEDs","category":"Get Started","description":"This sample shows how to use the new LED class and APIs added to the MRAA library. It is intended to run on the UP Squared board, and will utilize the 4 built-in color LEDs located under the Ethernet ports. No additional hardware is required.","author":"Intel Corporation","date":"2018-03-15","platform":{"hwreq":["UP Squared Board"],"libs":["mraa"]},"sample_readme_uri":"https://github.com/intel-iot-devkit/iot-devkit-samples/blob/iss2020-update1/up2-leds/README.md","categories":["Code Samples/Get Started"],"dependencies":["mraa","iot-plugin"],"main":"up2-leds.cpp","ldflags":"-lmraa","projectOptions":[{"projectType":"cdt","dockerSupported":"true"}]}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/advisor/Vector_Tutorial_Data_Alignment","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Vector_Tutorial_Data_Alignment","category":"Intel® Advisor","categories":["Tool Samples/Performance, Power, & Thermal Analysis"],"description":"This code demonstrates how aligning and padding your data structures can improve your vectorization. It is intended for use with the \"Data Alignment, Padding, and Peel/Remainder Loops\" video walkthrough.\n\n https://software.intel.com/en-us/videos/data-alignment-padding-and-peel-remainder-loops","author":"Intel Corporation","date":"2018-06-05","tag":"system","sample_readme_uri":"https://github.com/intel-system-studio/samples/blob/iss2020-update1/advisor/Vector_Tutorial_Data_Alignment/cpp/readme.txt","dependencies":["advisor","icc"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"makeVariables":{".DEFAULT_GOAL":"default","--directory":"DataAlignment"},"indexerVariables":{"COMMAND":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icpc","FLAGS":"-I ${ISS_ROOT}/advisor_2019/include/"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/advisor/Vector_Tutorial_Introduction","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Vector_Tutorial_Introduction","category":"Intel® Advisor","categories":["Tool Samples/Performance, Power, & Thermal Analysis"],"description":"This simple code demonstrates the basic functionality of each of the analyses and reports in the Vectorization Workflow. It is intended for use with the \"Intro to Intel(R) Advisor: Vectorization Workflow\" video walkthrough.\n\n https://software.intel.com/en-us/videos/introduction-to-intel-advisor-vectorization-workflow","author":"Intel Corporation","date":"2018-06-05","tag":"system","sample_readme_uri":"https://github.com/intel-system-studio/samples/blob/iss2020-update1/advisor/Vector_Tutorial_Introduction/cpp/Vectorization_Advisor/readme.txt","dependencies":["advisor","icc"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"makeVariables":{".DEFAULT_GOAL":"default","--directory":"Vectorization_Advisor"},"indexerVariables":{"COMMAND":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icpc","FLAGS":"-I ${ISS_ROOT}/advisor_2019/include/"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/advisor/Vector_Tutorial_Memory_Access_101","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Vector_Tutorial_Memory_Access_101","category":"Intel® Advisor","categories":["Tool Samples/Performance, Power, & Thermal Analysis"],"description":"Memory Access 101 This code is used in the \"Memory Access 101\" video walkthrough, a conceptual introduction explaining how memory access patterns can affect application efficiency. It is intended as a primer to prepare the user for the Stride and MAP walkthrough.\n\n https://software.intel.com/en-us/videos/memory-access-101","author":"Intel Corporation","date":"2018-06-05","tag":"system","sample_readme_uri":"https://github.com/intel-system-studio/samples/blob/iss2020-update1/advisor/Vector_Tutorial_Memory_Access_101/cpp/readme.txt","dependencies":["icc","advisor"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"makeVariables":{".DEFAULT_GOAL":"default","--directory":"Contiguity"},"indexerVariables":{"COMMAND":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icpc","FLAGS":"-I ${ISS_ROOT}/advisor_2019/include/"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/advisor/Vector_Tutorial_Stride_and_MAP","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Vector_Tutorial_Stride_and_MAP","category":"Intel® Advisor","categories":["Tool Samples/Performance, Power, & Thermal Analysis"],"description":"This code demonstrates the use and interpretation of the Memory Access Patterns analysis and Survey report to investigate the effects of access strides on code efficiency. It is intended for use with the \"Stride and Memory Access Patterns\" video walkthrough.\n\n https://software.intel.com/en-us/videos/stride-and-memory-access-patterns","author":"Intel Corporation","date":"2018-06-05","tag":"system","sample_readme_uri":"https://github.com/intel-system-studio/samples/blob/iss2020-update1/advisor/Vector_Tutorial_Stride_and_MAP/cpp/Stride/readme.txt","dependencies":["icc","advisor"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"makeVariables":{".DEFAULT_GOAL":"default","--directory":"Stride"},"indexerVariables":{"COMMAND":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icpc","FLAGS":"-I ${ISS_ROOT}/advisor_2019/include/"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/advisor/Vector_Tutorial_Vectorization_and_Data_Size","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Vector_Tutorial_Vectorization_and_Data_Size","category":"Intel® Advisor","categories":["Tool Samples/Performance, Power, & Thermal Analysis"],"description":"This code demonstrates the effects of vectorization at different lengths by comparing unvectorized and vectorized loops operating on different data sizes. It is intended for use with the \"Advantages of Vectorization & the Effects of Data Size\" video walkthrough.\n\n https://software.intel.com/en-us/videos/advantages-of-vectorization-and-the-effects-of-data-size","author":"Intel Corporation","date":"2018-06-05","tag":"system","sample_readme_uri":"https://github.com/intel-system-studio/samples/blob/iss2020-update1/advisor/Vector_Tutorial_Vectorization_and_Data_Size/cpp/VectorLength/readme.txt","dependencies":["icc","advisor"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"makeVariables":{".DEFAULT_GOAL":"default","--directory":"VectorLength"},"indexerVariables":{"COMMAND":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icpc","FLAGS":"-I ${ISS_ROOT}/advisor_2019/include/"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/advisor/mmult_Advisor","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"mmult_Advisor","category":"Intel® Advisor","categories":["Tool Samples/Performance, Power, & Thermal Analysis"],"description":"mmult sample application written using the C++ programming language. It explains how to open, build, and run this sample application using the Intel(R) Advisor XE.","author":"Intel Corporation","date":"2018-06-05","tag":"system","sample_readme_uri":"https://github.com/intel-system-studio/samples/blob/iss2020-update1/advisor/mmult_Advisor/cpp/README","dependencies":["advisor"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"indexerVariables":{"COMMAND":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icpc","FLAGS":"-I ${ISS_ROOT}/advisor_2019/include/"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/advisor/nqueens_Advisor","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"nqueens_Advisor","category":"Intel® Advisor","categories":["Tool Samples/Performance, Power, & Thermal Analysis"],"description":"nqueens sample application written using the C++ programming language. It explains how to open, build, and run this sample application using the Intel(R) Advisor.","author":"Intel Corporation","date":"2018-06-05","tag":"system","sample_readme_uri":"https://github.com/intel-system-studio/samples/blob/iss2020-update1/advisor/nqueens_Advisor/cpp/README","dependencies":["advisor"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"indexerVariables":{"COMMAND":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icpc","FLAGS":"-I ${ISS_ROOT}/advisor_2019/include/ -I ${ISS_ROOT}/compilers_and_libraries/linux/tbb"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/advisor/roofline_demo_samples","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"roofline_demo_samples","category":"Intel® Advisor","categories":["Tool Samples/Performance, Power, & Thermal Analysis"],"description":"The sample code in this package is intended for use with the 'Roofline Analysis in Intel® Advisor 2017' tutorial video, available online at the Intel® Developer Zone. This code is largely conceptual rather than functional in nature. It performs meaningless operations on meaningless data in various layouts, abstractly representing various types of scenarios and optimization problems (such as being memory bound or inefficiently vectorized) at different arithmetic intensities, for the purpose of demonstrating specific effects in the Roofline Analysis feature of Intel® Advisor.","author":"Intel Corporation","date":"2018-06-05","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/advisor/roofline_demo_samples/cpp/readme.html","dependencies":["advisor","icc"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"makeVariables":{".DEFAULT_GOAL":"default","CXX":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icpc"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/advisor/tachyon_Advisor","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"tachyon_Advisor","category":"Intel® Advisor","categories":["Tool Samples/Performance, Power, & Thermal Analysis"],"description":"Tachyon sample application written using the C++ programming language. It explains how to open, build, and run this sample application using the Intel(R) Advisor.","author":"Intel Corporation","date":"2018-06-05","tag":"system","sample_readme_uri":"https://github.com/intel-system-studio/samples/blob/iss2020-update1/advisor/tachyon_Advisor/cpp/README","dependencies":["tbb","advisor"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}]}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/advisor/vec_samples","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"vec_samples","category":"Intel® Advisor","categories":["Tool Samples/Performance, Power, & Thermal Analysis"],"description":"Intel Advisor offers Vectorization Advisor, a vectorization optimization tool, and Threading Advisor, a threading design and prototyping tool, to help ensure your Fortran, C and C++ applications realize full performance potential on modern processors, such as Intel® Xeon Phi™ processors.","author":"Intel Corporation","date":"2018-06-05","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/advisor/vec_samples/cpp/advixe_readme.htm","dependencies":["icc","advisor"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"makeVariables":{".DEFAULT_GOAL":"default"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/compiler/Averagingfilter_SDLT_samples","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Averaging Filter - SDLT","category":"Intel® Compiler","categories":["Code Samples/Software Optimization","Tool Samples/Intel C++ Compiler"],"description":"This sample demonstrates how to increase the performance of Averaging filter using Intel® SIMD Data Layout Templates (Intel® SDLT).","author":"Intel Corporation","date":"2018-02-23","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/compiler/Averagingfilter_SDLT_samples/cpp/readme.html","dependencies":["icc"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/include"},"makeVariables":{"CXX":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icpc"},"indexerVariables":{"COMMAND":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icpc","FLAGS":"-std=c++11"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/compiler/tachyon_samples","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Tachyon","category":"Intel® Compiler","categories":["Code Samples/Software Optimization","Tool Samples/Intel C++ Compiler"],"description":"This sample shows how to thread an application step-by-step using the Tachyon parallel raytracer/renderer used in combination with the Intel® C++ Compiler Tutorial \"Threading Your Application\".","author":"Intel Corporation","date":"2018-02-23","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/compiler/tachyon_samples/cpp/readme.html","dependencies":["icc","tbb"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/include","LD_LIBRARY_PATH":"${ISS_ROOT}/compilers_and_libraries/linux/lib/intel64:${ISS_ROOT}/compilers_and_libraries/linux/tbb/lib/intel64_lin/gcc4.7"},"makeVariables":{"CXX":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc",".DEFAULT_GOAL":"release"},"indexerVariables":{"FLAGS":"-std=c++11"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/daal/kdb","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"KDB","category":"Intel® Data Analytics Acceleration Library","categories":["Code Samples/Software Optimization","Tool Samples/Intel® Data Analytics Acceleration Library"],"description":"KDB samples for the Intel® Data Analytics Acceleration Library (Intel® DAAL) are designed to show how to use this library with a KDB database in a C++ application. The sample needs KDB support. For instructions, see readme.html","author":"Intel Corporation","date":"2018-02-26","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/daal/kdb/cpp/readme.html","dependencies":["daal","tbb"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/include:${ISS_ROOT}/compilers_and_libraries/linux/daal/include"},"makeVariables":{"DAALROOT":"${ISS_ROOT}/compilers_and_libraries/linux/daal","TBBROOT":"${ISS_ROOT}/compilers_and_libraries/linux/tbb","CC":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc",".DEFAULT_GOAL":"sointel64"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/daal/mysql","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"MySQL","category":"Intel® Data Analytics Acceleration Library","categories":["Code Samples/Software Optimization","Tool Samples/Intel® Data Analytics Acceleration Library"],"description":"MySQL samples for the Intel® Data Analytics Acceleration Library (Intel® DAAL) are designed to show how to use this library with a MySQL database in a C++ application.","author":"Intel Corporation","date":"2018-02-26","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/daal/mysql/cpp/readme.html","dependencies":["daal","tbb"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/include:${ISS_ROOT}/compilers_and_libraries/linux/daal/include"},"makeVariables":{"DAALROOT":"${ISS_ROOT}/compilers_and_libraries/linux/daal","TBBROOT":"${ISS_ROOT}/compilers_and_libraries/linux/tbb","CC":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc",".DEFAULT_GOAL":"sointel64"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/daal/neural_networks","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Neural Networks","category":"Intel® Data Analytics Acceleration Library","categories":["Code Samples/Software Optimization","Tool Samples/Intel® Data Analytics Acceleration Library"],"description":"Neural networks samples for the Intel® Data Analytics Acceleration Library (Intel® DAAL) are designed to show how to use this library to create most common neural network topologies such as LeNet, AlexNet, GoogleNet in a C++ application.","author":"Intel Corporation","date":"2018-02-26","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/daal/neural_networks/cpp/readme.html","dependencies":["daal","tbb"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/daal/include","LD_LIBRARY_PATH":"${ISS_ROOT}/compilers_and_libraries/linux/tbb/lib/intel64_lin/gcc4.7"},"makeVariables":{"DAALROOT":"${ISS_ROOT}/compilers_and_libraries/linux/daal","TBBROOT":"${ISS_ROOT}/compilers_and_libraries/linux/tbb","CC":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc",".DEFAULT_GOAL":"sointel64","mode":"build"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/inspector/tachyon_insp_xe","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Tachyon","category":"Intel® Inspector","categories":["Code Samples/Performance, Power, & Thermal Analysis","Tool Samples/Intel® Inspector"],"description":"Tachyon is a parallel raytracer / renderer used in combination with the Intel® Inspector tutorial.","author":"Intel Corporation","date":"2018-03-05","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/inspector/tachyon_insp_xe/cpp/readme.html","dependencies":["inspector"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}]}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/ipp/ipp_blur_rotate_sample","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Image Blurring and Rotation","category":"Intel® Integrated Performance Primitives","categories":["Code Samples/Software Optimization","Tool Samples/Intel® Integrated Performance Primitives"],"description":"The Image Blurring and Rotation sample is designed to illustrate how to use Intel® Integrated Performance Primitives (Intel® IPP) functions for image affine warping and filtering.","author":"Intel Corporation","date":"2018-03-05","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/ipp/ipp_blur_rotate_sample/cpp/readme.html","dependencies":["ipp"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/ipp/include","LIBRARY_PATH":"${ISS_ROOT}/compilers_and_libraries/linux/ipp/lib/intel64_lin","LD_LIBRARY_PATH":"${ISS_ROOT}/compilers_and_libraries/linux/ipp/lib/intel64_lin"},"makeVariables":{"UI":"x","CXX":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc","--makefile":"Makefile_lin"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/pstl/convex_hull","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Convex Hull","category":"Parallel STL","categories":["Tool Samples/Parallel STL"],"description":"This example demonstrates computing the convex_hull of a set of points on the plane based on the quickhull algorithm.","author":"Intel Corporation","date":"2018-02-26","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/pstl/convex_hull/cpp/readme.html","dependencies":["icc","tbb"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/pstl/include:${ISS_ROOT}/compilers_and_libraries/linux/tbb/include","LIBRARY_PATH":"${ISS_ROOT}/compilers_and_libraries/linux/tbb/lib/intel64_lin/gcc4.7","LD_LIBRARY_PATH":"${ISS_ROOT}/compilers_and_libraries/linux/tbb/lib/intel64_lin/gcc4.7"},"makeVariables":{"CXX":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc",".DEFAULT_GOAL":"debug"},"indexerVariables":{"FLAGS":"-std=c++11"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/pstl/dot_product","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Dot Product","category":"Parallel STL","categories":["Tool Samples/Parallel STL"],"description":"This example demonstrates computing the dot product of two vectors.","author":"Intel Corporation","date":"2018-03-05","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/pstl/dot_product/cpp/readme.html","dependencies":["icc","tbb"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/pstl/include:${ISS_ROOT}/compilers_and_libraries/linux/tbb/include","LIBRARY_PATH":"${ISS_ROOT}/compilers_and_libraries/linux/tbb/lib/intel64_lin/gcc4.7","LD_LIBRARY_PATH":"${ISS_ROOT}/compilers_and_libraries/linux/tbb/lib/intel64_lin/gcc4.7"},"makeVariables":{"CXX":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc"},"indexerVariables":{"FLAGS":"-std=c++11"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/pstl/gamma_correction","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Gamma Correction","category":"Parallel STL","categories":["Tool Samples/Parallel STL"],"description":"This example demonstrates gamma correction — a nonlinear operation used to encode and decode the luminance of each image pixel.","author":"Intel Corporation","date":"2018-03-05","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/pstl/gamma_correction/cpp/readme.html","dependencies":["icc","tbb"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/pstl/include:${ISS_ROOT}/compilers_and_libraries/linux/tbb/include","LIBRARY_PATH":"${ISS_ROOT}/compilers_and_libraries/linux/tbb/lib/intel64_lin/gcc4.7","LD_LIBRARY_PATH":"${ISS_ROOT}/compilers_and_libraries/linux/tbb/lib/intel64_lin/gcc4.7"},"makeVariables":{"CXX":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc"},"indexerVariables":{"FLAGS":"-std=c++11"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/tbb","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"TBB","category":"Intel® Threading Building Blocks","categories":["Code Samples/Software Optimization","Tool Samples/Intel® Threading Building Blocks"],"description":"This project includes example usages of Intel® Threading Building Blocks (Intel® TBB).","author":"Intel Corporation","date":"2018-03-09","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/tbb/cpp/index.html","dependencies":["tbb"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"environmentVariables":{"CPATH":"${ISS_ROOT}/compilers_and_libraries/linux/tbb/include:${ISS_ROOT}/compilers_and_libraries/linux/mkl/include","LIBRARY_PATH":"${ISS_ROOT}/compilers_and_libraries/linux/tbb/lib/intel64_lin/gcc4.7:${ISS_ROOT}/compilers_and_libraries/linux/mkl/lib/intel64","LD_LIBRARY_PATH":"${ISS_ROOT}/compilers_and_libraries/linux/tbb/lib/intel64_lin/gcc4.7:${ISS_ROOT}/compilers_and_libraries/linux/mkl/lib/intel64"},"makeVariables":{"CXX":"${ISS_ROOT}/compilers_and_libraries/linux/bin/intel64/icc","--directory":"GettingStarted/sub_string_finder"},"indexerVariables":{"FLAGS":"-std=c++11"}}},{"path":"system-samples-a54ff10cdb1cffa1175fe07dc2f36de9fafbf798/vtune_amplifier/tachyon_sample_linux","sha":"a54ff10cdb1cffa1175fe07dc2f36de9fafbf798","example":{"name":"Tachyon","category":"Intel® VTune™ Amplifier","categories":["Code Samples/Performance, Power, & Thermal Analysis","Tool Samples/Intel® VTune™ Amplifier"],"description":"The tachyon sample is a 2-D raytracer/renderer that shows how different types of Intel® VTune™ Amplifier analysis help identify performance bottlenecks in the code, how algorithm optimization techniques affect the application performance, and how you can localize the performance changes you got after optimizations.","author":"Intel Corporation","date":"2018-03-08","tag":"system","sample_readme_uri":"https://cdn.rawgit.com/intel-system-studio/samples/iss2020-update1/vtune_amplifier/tachyon_sample_linux/cpp/readme.html","dependencies":["vtune"],"projectOptions":[{"projectType":"makefile","dockerSupported":"false"}],"makeVariables":{".DEFAULT_GOAL":"release"}}},{"path":"openvino-samples-310443142e8b0cc3139d8f654b3b6ddad835aa12/openvino/classification_sample","sha":"310443142e8b0cc3139d8f654b3b6ddad835aa12","example":{"name":"Image Classification","category":"OpenVINO™ Toolkit","categories":["Tool Samples/OpenVINO™ Toolkit","Code Samples/Get Started"],"cmakeDefines":[{"name":"ENABLE_SSE42","type":"STRING","value":"ON"}],"description":"This sample demonstrates how to run the Image Classification sample application with inference executed in the asynchronous mode.\nAttention: This sample requires a specific Docker Image. Before continuing to create this sample see this guide: https://intel.ly/2qQQsPm","author":"Intel Corporation","date":"2019-9-27","sample_readme_uri":"https://intel.ly/2OTFtg7","dependencies":["openvino"],"dockerDependencies":[{"feature":"OpenVINO","type":"error","content":"This sample requires a Docker Image that supports OpenVINO. Select the OpenVINO platform/Docker image below."},{"feature":"OpenVINO-2019-R3","type":"warning","content":"This sample has been tested with OpenVINO 2019 R3. It might not build or work properly if you use a different release of OpenVINO."}],"main":"classification_sample/main.cpp","projectOptions":[{"projectType":"cmake","dockerSupported":"true"}],"launchConfig":{"applicationToLaunch":"build/${BUILD_CONFIG}/intel64/${BUILD_CONFIG}/classification_sample_async","arguments":"-d CPU -i /home/ubuntu/OpenVINO/horse.jpg -m /home/ubuntu/OpenVINO/Squeezenet/output/squeezenet_v1.1.xml -nt 5","remoteCommand":"export OPENVINO_DIR=/opt/intel/openvino; export INFENG=$OPENVINO_DIR/deployment_tools/inference_engine; export IE_PLUGINS_PATH=$INFENG/lib/intel64; [ ! -d /tmp/OpenVINO ] && mkdir /tmp/OpenVINO; cp $INFENG/lib/intel64/libcpu_extension_sse4.so /tmp/OpenVINO/libcpu_extension.so; export LD_LIBRARY_PATH=/tmp/OpenVINO:$OPENVINO_DIR/opencv/lib:/opt/intel/opencl:$INFENG/external/gna/lib:$INFENG/external/mkltiny_lnx/lib:$INFENG/external/tbb/lib:$INFENG/lib/intel64:$LD_LIBRARY_PATH"}}},{"path":"openvino-samples-310443142e8b0cc3139d8f654b3b6ddad835aa12/openvino/hello_classification","sha":"310443142e8b0cc3139d8f654b3b6ddad835aa12","example":{"name":"Hello Infer","category":"OpenVINO™ Toolkit","categories":["Tool Samples/OpenVINO™ Toolkit"],"cmakeDefines":[{"name":"ENABLE_SSE42","type":"STRING","value":"ON"}],"description":"This topic describes how to run the Hello Infer Classification sample application. The sample is a simplified version of the Image Classification Async Sample. It demonstrates how to use the following Inference Engine API in applications:\n* Synchronous Infer Request API\n* Input auto-resize API.\nAttention: This sample requires a specific Docker Image. Before continuing to create this sample see this guide: https://intel.ly/2qQQsPm","author":"Intel Corporation","date":"2019-9-27","sample_readme_uri":"https://intel.ly/2XRL0rq","dependencies":["openvino"],"dockerDependencies":[{"feature":"OpenVINO","type":"error","content":"This sample requires a Docker Image that supports OpenVINO. Select the OpenVINO platform/Docker image below."},{"feature":"OpenVINO-2019-R3","type":"warning","content":"This sample has been tested with OpenVINO 2019 R3. It might not build or work properly if you use a different release of OpenVINO."}],"main":"hello_classification/main.cpp","projectOptions":[{"projectType":"cmake","dockerSupported":"true"}],"launchConfig":{"applicationToLaunch":"build/${BUILD_CONFIG}/intel64/${BUILD_CONFIG}/hello_classification","arguments":"/home/ubuntu/OpenVINO/Squeezenet/output/squeezenet_v1.1.xml /home/ubuntu/OpenVINO/horse.jpg CPU","remoteCommand":"export OPENVINO_DIR=/opt/intel/openvino; export INFENG=$OPENVINO_DIR/deployment_tools/inference_engine; export IE_PLUGINS_PATH=$INFENG/lib/intel64; [ ! -d /tmp/OpenVINO ] && mkdir /tmp/OpenVINO; cp $INFENG/lib/intel64/libcpu_extension_sse4.so /tmp/OpenVINO/libcpu_extension.so; export LD_LIBRARY_PATH=/tmp/OpenVINO:$OPENVINO_DIR/opencv/lib:/opt/intel/opencl:$INFENG/external/gna/lib:$INFENG/external/mkltiny_lnx/lib:$INFENG/external/tbb/lib:$INFENG/lib/intel64:$LD_LIBRARY_PATH"}}},{"path":"openvino-samples-310443142e8b0cc3139d8f654b3b6ddad835aa12/openvino/interactive_face_detection_demo","sha":"310443142e8b0cc3139d8f654b3b6ddad835aa12","example":{"name":"Face Detection","category":"OpenVINO™ Toolkit","categories":["Tool Samples/OpenVINO™ Toolkit"],"cmakeDefines":[{"name":"ENABLE_SSE42","type":"STRING","value":"ON"}],"description":"This demo showcases the Object Detection task applied to face recognition using a sequence of neural networks.\nAttention: This sample requires a specific Docker Image. Before continuing to create this sample see this guide: https://intel.ly/2qQQsPm","author":"Intel Corporation","date":"2019-09-30","sample_readme_uri":"https://intel.ly/37L8OSo","dependencies":["openvino"],"dockerDependencies":[{"feature":"OpenVINO","type":"error","content":"This sample requires a Docker Image that supports OpenVINO. Select the OpenVINO platform/Docker image below."},{"feature":"OpenVINO-2019-R3","type":"warning","content":"This sample has been tested with OpenVINO 2019 R3. It might not build or work properly if you use a different release of OpenVINO."}],"main":"interactive_face_detection_demo/main.cpp","cflags":"-I/opt/intel/openvino/inference_engine/include","projectOptions":[{"projectType":"cmake","dockerSupported":"true"}],"launchConfig":{"applicationToLaunch":"build/${BUILD_CONFIG}/intel64/${BUILD_CONFIG}/interactive_face_detection_demo","arguments":"-i /home/ubuntu/OpenVINO/people.jpg -m '/tmp/OpenVINO/intel/face-detection-adas-0001/FP32/face-detection-adas-0001.xml' -d CPU","remoteCommand":"export OPENVINO_DIR=/opt/intel/openvino; export INFENG=$OPENVINO_DIR/deployment_tools/inference_engine; export IE_PLUGINS_PATH=$INFENG/lib/intel64; [ ! -d /tmp/OpenVINO ] && mkdir /tmp/OpenVINO; cp $INFENG/lib/intel64/libcpu_extension_sse4.so /tmp/OpenVINO/libcpu_extension.so; export LD_LIBRARY_PATH=/tmp/OpenVINO:$OPENVINO_DIR/opencv/lib:/opt/intel/opencl:$INFENG/external/gna/lib:$INFENG/external/mkltiny_lnx/lib:$INFENG/external/tbb/lib:$INFENG/lib/intel64:$LD_LIBRARY_PATH"}}},{"path":"openvino-samples-310443142e8b0cc3139d8f654b3b6ddad835aa12/openvino/security_barrier_camera_demo","sha":"310443142e8b0cc3139d8f654b3b6ddad835aa12","example":{"name":"Security Barrier Camera","category":"OpenVINO™ Toolkit","categories":["Tool Samples/OpenVINO™ Toolkit"],"cmakeDefines":[{"name":"ENABLE_SSE42","type":"STRING","value":"ON"}],"description":"This sample showcases Vehicle Detection followed by the Vehicle Attributes and License-Plate Recognition applied on top of the detection results.\nAttention: This sample requires a specific Docker Image. Before continuing to create this sample see this guide: https://intel.ly/2qQQsPm","author":"Intel Corporation","date":"2019-9-30","sample_readme_uri":"https://intel.ly/2OVltJQ","dependencies":["openvino"],"dockerDependencies":[{"feature":"OpenVINO","type":"error","content":"This sample requires a Docker Image that supports OpenVINO. Select the OpenVINO platform/Docker image below."},{"feature":"OpenVINO-2019-R3","type":"warning","content":"This sample has been tested with OpenVINO 2019 R3. It might not build or work properly if you use a different release of OpenVINO."}],"main":"security_barrier_camera_demo/main.cpp","projectOptions":[{"projectType":"cmake","dockerSupported":"true"}],"launchConfig":{"applicationToLaunch":"build/${BUILD_CONFIG}/intel64/${BUILD_CONFIG}/security_barrier_camera_demo","arguments":"-t 0.75 -d CPU -i '/opt/intel/openvino/deployment_tools/demo/car_1.bmp' -m '/tmp/OpenVINO/intel/vehicle-license-plate-detection-barrier-0106/FP32/vehicle-license-plate-detection-barrier-0106.xml' -m_va '/tmp/OpenVINO/intel/vehicle-attributes-recognition-barrier-0039/FP32/vehicle-attributes-recognition-barrier-0039.xml' -m_lpr '/tmp/OpenVINO/intel/license-plate-recognition-barrier-0001/FP32/license-plate-recognition-barrier-0001.xml'","remoteCommand":"export OPENVINO_DIR=/opt/intel/openvino; export INFENG=$OPENVINO_DIR/deployment_tools/inference_engine; export IE_PLUGINS_PATH=$INFENG/lib/intel64; [ ! -d /tmp/OpenVINO ] && mkdir /tmp/OpenVINO; cp $INFENG/lib/intel64/libcpu_extension_sse4.so /tmp/OpenVINO/libcpu_extension.so; export LD_LIBRARY_PATH=/tmp/OpenVINO:$OPENVINO_DIR/opencv/lib:/opt/intel/opencl:$INFENG/external/gna/lib:$INFENG/external/mkltiny_lnx/lib:$INFENG/external/tbb/lib:$INFENG/lib/intel64:$LD_LIBRARY_PATH"}}}]